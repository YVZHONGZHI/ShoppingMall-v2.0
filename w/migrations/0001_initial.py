# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2023-12-01 15:59
from __future__ import unicode_literals

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.FileField(default='avatar/w.jpg', upload_to='avatar/', verbose_name='用户头像')),
                ('balance', models.DecimalField(decimal_places=2, default=30000.0, max_digits=8, verbose_name='余额')),
                ('create_time', models.DateField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='商品分类')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=255, verbose_name='评论内容')),
                ('content_time', models.DateTimeField(auto_now_add=True, verbose_name='评论时间')),
            ],
        ),
        migrations.CreateModel(
            name='Flow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance_flow', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='余额流水')),
                ('buy_num', models.BigIntegerField(default=0, verbose_name='买入数')),
                ('sell_num', models.BigIntegerField(default=0, verbose_name='卖出数')),
                ('pay_time', models.DateTimeField(auto_now_add=True, verbose_name='支付时间')),
            ],
        ),
        migrations.CreateModel(
            name='Goods',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shop_name', models.CharField(max_length=64, verbose_name='商品名称')),
                ('shop_price', models.DecimalField(decimal_places=2, max_digits=7, verbose_name='商品单价')),
                ('desc', models.CharField(max_length=255, verbose_name='商品简介')),
                ('content', models.TextField(verbose_name='商品说明')),
                ('shop_picture', models.FileField(default='shop_picture/w.jpeg', upload_to='shop_picture/', verbose_name='商品图片')),
                ('create_time', models.DateField(auto_now_add=True, verbose_name='出售时间')),
                ('up_num', models.BigIntegerField(default=0, verbose_name='点赞数')),
                ('down_num', models.BigIntegerField(default=0, verbose_name='点踩数')),
                ('comment_num', models.BigIntegerField(default=0, verbose_name='评论数')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='w.Category')),
            ],
        ),
        migrations.CreateModel(
            name='Goods2Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goods', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='w.Goods')),
            ],
        ),
        migrations.CreateModel(
            name='Mall',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_name', models.CharField(max_length=32, verbose_name='个人站点名称')),
                ('site_title', models.CharField(max_length=32, verbose_name='个人站点标题')),
            ],
        ),
        migrations.CreateModel(
            name='ShopCar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shop_time', models.DateTimeField(auto_now_add=True, verbose_name='进购物车时间')),
                ('goods', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='w.Goods')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='w.UserInfo')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='商品标签')),
                ('mall', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='w.Mall')),
            ],
        ),
        migrations.CreateModel(
            name='UpAndDown',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_up', models.BooleanField()),
                ('goods', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='w.Goods')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='w.UserInfo')),
            ],
        ),
        migrations.AddField(
            model_name='goods2tag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='w.Tag'),
        ),
        migrations.AddField(
            model_name='goods',
            name='mall',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='w.Mall'),
        ),
        migrations.AddField(
            model_name='goods',
            name='tags',
            field=models.ManyToManyField(through='w.Goods2Tag', to='w.Tag'),
        ),
        migrations.AddField(
            model_name='flow',
            name='goods',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='w.Goods'),
        ),
        migrations.AddField(
            model_name='flow',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='w.UserInfo'),
        ),
        migrations.AddField(
            model_name='comment',
            name='goods',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='w.Goods'),
        ),
        migrations.AddField(
            model_name='comment',
            name='parent',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='w.Comment'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='w.UserInfo'),
        ),
        migrations.AddField(
            model_name='category',
            name='mall',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='w.Mall'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='mall',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='w.Mall'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
